// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Solarness.Services.Database;

#nullable disable

namespace Solarness.Services.Migrations
{
    [DbContext(typeof(SolarnessDbContext))]
    [Migration("20250323120450_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Solarness.Services.Database.Documentation", b =>
                {
                    b.Property<int>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocumentId"));

                    b.Property<DateOnly?>("AdditionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("DocumentLocation")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("DocumentName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("DocumentType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("DocumentId")
                        .HasName("PK__Document__1ABEEF0FCDC0F7AC");

                    b.HasIndex("ProjectId");

                    b.ToTable("Documentation", (string)null);

                    b.HasData(
                        new
                        {
                            DocumentId = 1,
                            AdditionDate = new DateOnly(2024, 1, 10),
                            DocumentLocation = "/documents/site_plan_1.pdf",
                            DocumentName = "Site Plan",
                            DocumentType = "PDF",
                            ProjectId = 1
                        },
                        new
                        {
                            DocumentId = 2,
                            AdditionDate = new DateOnly(2024, 2, 5),
                            DocumentLocation = "/documents/permit_approval_1.pdf",
                            DocumentName = "Permit Approval",
                            DocumentType = "PDF",
                            ProjectId = 1
                        },
                        new
                        {
                            DocumentId = 3,
                            AdditionDate = new DateOnly(2024, 3, 15),
                            DocumentLocation = "/documents/electrical_layout_2.dwg",
                            DocumentName = "Electrical Layout",
                            DocumentType = "DWG",
                            ProjectId = 2
                        },
                        new
                        {
                            DocumentId = 4,
                            AdditionDate = new DateOnly(2024, 4, 2),
                            DocumentLocation = "/documents/inspection_report_3.docx",
                            DocumentName = "Inspection Report",
                            DocumentType = "DOCX",
                            ProjectId = 3
                        });
                });

            modelBuilder.Entity("Solarness.Services.Database.Financing", b =>
                {
                    b.Property<int>("FinancingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FinancingId"));

                    b.Property<decimal?>("FinancingAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateOnly?>("FinancingDate")
                        .HasColumnType("date");

                    b.Property<string>("FinancingName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("FinancingId")
                        .HasName("PK__Financin__706F686FB3BA6B0B");

                    b.HasIndex("ProjectId");

                    b.ToTable("Financing", (string)null);

                    b.HasData(
                        new
                        {
                            FinancingId = 1,
                            FinancingAmount = 50000.00m,
                            FinancingDate = new DateOnly(2024, 1, 15),
                            FinancingName = "Government Subsidy",
                            ProjectId = 1
                        },
                        new
                        {
                            FinancingId = 2,
                            FinancingAmount = 75000.00m,
                            FinancingDate = new DateOnly(2024, 2, 20),
                            FinancingName = "Bank Loan",
                            ProjectId = 2
                        },
                        new
                        {
                            FinancingId = 3,
                            FinancingAmount = 100000.00m,
                            FinancingDate = new DateOnly(2024, 3, 5),
                            FinancingName = "Private Investment",
                            ProjectId = 3
                        },
                        new
                        {
                            FinancingId = 4,
                            FinancingAmount = 25000.00m,
                            FinancingDate = new DateOnly(2024, 4, 10),
                            FinancingName = "Crowdfunding",
                            ProjectId = 4
                        });
                });

            modelBuilder.Entity("Solarness.Services.Database.Homeowner", b =>
                {
                    b.Property<int>("HomeownerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HomeownerId"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("HomeownerId")
                        .HasName("PK__Homeowne__8454E15114C8D373");

                    b.ToTable("Homeowners");

                    b.HasData(
                        new
                        {
                            HomeownerId = 1,
                            Address = "123 Solar St.",
                            City = "Solar City",
                            Country = "SolarLand",
                            Email = "johndoe@email.com",
                            FirstName = "John",
                            LastName = "Doe",
                            PhoneNumber = "123-456-7890",
                            PostalCode = "12345"
                        },
                        new
                        {
                            HomeownerId = 2,
                            Address = "456 Green Ave.",
                            City = "Eco Town",
                            Country = "EcoLand",
                            Email = "janesmith@email.com",
                            FirstName = "Jane",
                            LastName = "Smith",
                            PhoneNumber = "987-654-3210",
                            PostalCode = "67890"
                        },
                        new
                        {
                            HomeownerId = 3,
                            Address = "789 Windy Rd.",
                            City = "Wind City",
                            Country = "WindLand",
                            Email = "alicejohnson@email.com",
                            FirstName = "Alice",
                            LastName = "Johnson",
                            PhoneNumber = "555-123-4567",
                            PostalCode = "11223"
                        },
                        new
                        {
                            HomeownerId = 4,
                            Address = "789 Windy Rd.",
                            City = "Wind City",
                            Country = "WindLand",
                            Email = "alicejohnson@email.com",
                            FirstName = "Sam",
                            LastName = "Sam",
                            PhoneNumber = "555-123-4567",
                            PostalCode = "11223"
                        },
                        new
                        {
                            HomeownerId = 5,
                            Address = "321 Sunbeam St.",
                            City = "Solar City",
                            Country = "SolarLand",
                            Email = "michaelbrown@email.com",
                            FirstName = "Michael",
                            LastName = "Brown",
                            PhoneNumber = "222-333-4444",
                            PostalCode = "54321"
                        },
                        new
                        {
                            HomeownerId = 6,
                            Address = "654 Eco Dr.",
                            City = "Eco Town",
                            Country = "EcoLand",
                            Email = "emilydavis@email.com",
                            FirstName = "Emily",
                            LastName = "Davis",
                            PhoneNumber = "111-222-3333",
                            PostalCode = "98765"
                        },
                        new
                        {
                            HomeownerId = 7,
                            Address = "147 Solar Panel Ln.",
                            City = "Green Valley",
                            Country = "SolarLand",
                            Email = "robertwilson@email.com",
                            FirstName = "Robert",
                            LastName = "Wilson",
                            PhoneNumber = "777-888-9999",
                            PostalCode = "56789"
                        },
                        new
                        {
                            HomeownerId = 8,
                            Address = "369 Renewable Ct.",
                            City = "Eco Town",
                            Country = "EcoLand",
                            Email = "lauramartinez@email.com",
                            FirstName = "Laura",
                            LastName = "Martinez",
                            PhoneNumber = "666-777-8888",
                            PostalCode = "34567"
                        },
                        new
                        {
                            HomeownerId = 9,
                            Address = "258 Sustainable St.",
                            City = "Wind City",
                            Country = "WindLand",
                            Email = "davidanderson@email.com",
                            FirstName = "David",
                            LastName = "Anderson",
                            PhoneNumber = "444-555-6666",
                            PostalCode = "23456"
                        },
                        new
                        {
                            HomeownerId = 10,
                            Address = "159 Bright Future Blvd.",
                            City = "Solar City",
                            Country = "SolarLand",
                            Email = "sophiataylor@email.com",
                            FirstName = "Sophia",
                            LastName = "Taylor",
                            PhoneNumber = "888-999-0000",
                            PostalCode = "67890"
                        },
                        new
                        {
                            HomeownerId = 11,
                            Address = "753 Green Energy Ave.",
                            City = "Eco Town",
                            Country = "EcoLand",
                            Email = "jamesharris@email.com",
                            FirstName = "James",
                            LastName = "Harris",
                            PhoneNumber = "333-444-5555",
                            PostalCode = "13579"
                        },
                        new
                        {
                            HomeownerId = 12,
                            Address = "951 Wind Power Rd.",
                            City = "Wind City",
                            Country = "WindLand",
                            Email = "isabellawhite@email.com",
                            FirstName = "Isabella",
                            LastName = "White",
                            PhoneNumber = "222-111-0000",
                            PostalCode = "98712"
                        },
                        new
                        {
                            HomeownerId = 13,
                            Address = "852 Solar Horizon St.",
                            City = "Solar City",
                            Country = "SolarLand",
                            Email = "williamthompson@email.com",
                            FirstName = "William",
                            LastName = "Thompson",
                            PhoneNumber = "777-666-5555",
                            PostalCode = "36985"
                        },
                        new
                        {
                            HomeownerId = 14,
                            Address = "456 Renewable Future Blvd.",
                            City = "Green Valley",
                            Country = "EcoLand",
                            Email = "oliviagarcia@email.com",
                            FirstName = "Olivia",
                            LastName = "Garcia",
                            PhoneNumber = "999-888-7777",
                            PostalCode = "21478"
                        });
                });

            modelBuilder.Entity("Solarness.Services.Database.InstallationDetail", b =>
                {
                    b.Property<int>("InstallationDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InstallationDetailId"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateOnly?>("InstallCompleteDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("InstallStartDate")
                        .HasColumnType("date");

                    b.Property<string>("InstallationType")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<int?>("NumberOfPanels")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("InstallationDetailId")
                        .HasName("PK__Installa__E00A47FA8D970B28");

                    b.HasIndex("LocationId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("InstallationDetails");

                    b.HasData(
                        new
                        {
                            InstallationDetailId = 1,
                            Description = "Installation of 25 roof-mounted solar panels for residential project.",
                            InstallCompleteDate = new DateOnly(2024, 3, 10),
                            InstallStartDate = new DateOnly(2024, 3, 1),
                            InstallationType = "Roof Mounted",
                            LocationId = 1,
                            NumberOfPanels = 25,
                            ProjectId = 1,
                            UserId = 1
                        },
                        new
                        {
                            InstallationDetailId = 2,
                            Description = "Ground-mounted solar panel system for commercial project.",
                            InstallCompleteDate = new DateOnly(2024, 3, 20),
                            InstallStartDate = new DateOnly(2024, 3, 15),
                            InstallationType = "Ground Mounted",
                            LocationId = 2,
                            NumberOfPanels = 40,
                            ProjectId = 2,
                            UserId = 2
                        },
                        new
                        {
                            InstallationDetailId = 3,
                            Description = "Residential solar installation with 30 roof-mounted panels.",
                            InstallCompleteDate = new DateOnly(2024, 4, 7),
                            InstallStartDate = new DateOnly(2024, 4, 1),
                            InstallationType = "Roof Mounted",
                            LocationId = 3,
                            NumberOfPanels = 30,
                            ProjectId = 3,
                            UserId = 3
                        },
                        new
                        {
                            InstallationDetailId = 4,
                            Description = "Installation of 50 ground-mounted solar panels at a commercial site.",
                            InstallCompleteDate = new DateOnly(2024, 4, 12),
                            InstallStartDate = new DateOnly(2024, 4, 5),
                            InstallationType = "Ground Mounted",
                            LocationId = 4,
                            NumberOfPanels = 50,
                            ProjectId = 4,
                            UserId = 4
                        });
                });

            modelBuilder.Entity("Solarness.Services.Database.InstallationLocation", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocationId"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("LocationId")
                        .HasName("PK__Installa__E7FEA49765C8A2A2");

                    b.HasIndex("ProjectId");

                    b.ToTable("InstallationLocations");

                    b.HasData(
                        new
                        {
                            LocationId = 1,
                            Address = "123 Solar St, Green Valley",
                            City = "Green Valley",
                            Country = "USA",
                            Latitude = 34.052199999999999,
                            LocationName = "Solar Installation Site 1",
                            Longitude = -118.2437,
                            ProjectId = 1
                        },
                        new
                        {
                            LocationId = 2,
                            Address = "456 Sunshine Rd, Tech Park",
                            City = "Tech City",
                            Country = "USA",
                            Latitude = 40.712800000000001,
                            LocationName = "Solar Installation Site 2",
                            Longitude = -74.006,
                            ProjectId = 2
                        },
                        new
                        {
                            LocationId = 3,
                            Address = "789 Bright Ave, Oak Town",
                            City = "Oak Town",
                            Country = "Canada",
                            Latitude = 43.651699999999998,
                            LocationName = "Solar Installation Site 3",
                            Longitude = -79.383200000000002,
                            ProjectId = 3
                        },
                        new
                        {
                            LocationId = 4,
                            Address = "101 Sunbeam Blvd, River City",
                            City = "River City",
                            Country = "Canada",
                            Latitude = 45.421500000000002,
                            LocationName = "Solar Installation Site 4",
                            Longitude = -75.699200000000005,
                            ProjectId = 4
                        });
                });

            modelBuilder.Entity("Solarness.Services.Database.Milestone", b =>
                {
                    b.Property<int>("MilestoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MilestoneId"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateOnly?>("MilestoneDate")
                        .HasColumnType("date");

                    b.Property<string>("MilestoneName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("MilestoneId")
                        .HasName("PK__Mileston__09C48078AD285774");

                    b.HasIndex("ProjectId");

                    b.ToTable("Milestones");

                    b.HasData(
                        new
                        {
                            MilestoneId = 1,
                            Description = "The project officially kicks off with team and stakeholder introductions.",
                            MilestoneDate = new DateOnly(2024, 1, 1),
                            MilestoneName = "Project Kickoff",
                            ProjectId = 1
                        },
                        new
                        {
                            MilestoneId = 2,
                            Description = "Final designs for the solar panel layout are approved.",
                            MilestoneDate = new DateOnly(2024, 2, 15),
                            MilestoneName = "Design Approval",
                            ProjectId = 1
                        },
                        new
                        {
                            MilestoneId = 3,
                            Description = "The necessary permits are approved for installation.",
                            MilestoneDate = new DateOnly(2024, 3, 5),
                            MilestoneName = "Permit Approval",
                            ProjectId = 2
                        },
                        new
                        {
                            MilestoneId = 4,
                            Description = "All required materials for installation are procured.",
                            MilestoneDate = new DateOnly(2024, 3, 25),
                            MilestoneName = "Material Procurement",
                            ProjectId = 2
                        },
                        new
                        {
                            MilestoneId = 5,
                            Description = "The site is prepared for solar panel installation.",
                            MilestoneDate = new DateOnly(2024, 4, 10),
                            MilestoneName = "Site Preparation",
                            ProjectId = 3
                        });
                });

            modelBuilder.Entity("Solarness.Services.Database.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SendDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("NotificationId")
                        .HasName("PK__Notifica__20CF2E1236416497");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new
                        {
                            NotificationId = 1,
                            Content = "Your solar project has been approved and is ready for the next phase.",
                            ProjectId = 1,
                            SendDate = new DateTime(2024, 3, 1, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Project Approved"
                        },
                        new
                        {
                            NotificationId = 2,
                            Content = "The installation for your project is scheduled for next week.",
                            ProjectId = 2,
                            SendDate = new DateTime(2024, 3, 5, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            Title = "Installation Scheduled"
                        },
                        new
                        {
                            NotificationId = 3,
                            Content = "Your solar panel installation has been completed. A final inspection is scheduled.",
                            ProjectId = 1,
                            SendDate = new DateTime(2024, 3, 10, 9, 15, 0, 0, DateTimeKind.Unspecified),
                            Title = "Final Inspection"
                        });
                });

            modelBuilder.Entity("Solarness.Services.Database.PerformanceHistory", b =>
                {
                    b.Property<int>("HistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HistoryId"));

                    b.Property<DateOnly?>("Date")
                        .HasColumnType("date");

                    b.Property<double?>("Efficiency")
                        .HasColumnType("float");

                    b.Property<double?>("EnergyProduced")
                        .HasColumnType("float");

                    b.Property<int?>("PanelId")
                        .HasColumnType("int");

                    b.HasKey("HistoryId")
                        .HasName("PK__Performa__4D7B4ABDE9D0F6E4");

                    b.HasIndex("PanelId");

                    b.ToTable("PerformanceHistory", (string)null);
                });

            modelBuilder.Entity("Solarness.Services.Database.Permit", b =>
                {
                    b.Property<int>("PermitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PermitId"));

                    b.Property<DateOnly?>("LastUpdatedDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("PermitReceivedDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("PermitSubmitDate")
                        .HasColumnType("date");

                    b.Property<string>("PermitType")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("PermitId")
                        .HasName("PK__Permits__0B0E6DD0C6F2C103");

                    b.HasIndex("ProjectId");

                    b.ToTable("Permits");

                    b.HasData(
                        new
                        {
                            PermitId = 1,
                            LastUpdatedDate = new DateOnly(2024, 2, 21),
                            PermitReceivedDate = new DateOnly(2024, 2, 20),
                            PermitSubmitDate = new DateOnly(2024, 2, 10),
                            PermitType = "Construction",
                            ProjectId = 1,
                            Status = "Approved"
                        },
                        new
                        {
                            PermitId = 2,
                            LastUpdatedDate = new DateOnly(2024, 3, 5),
                            PermitSubmitDate = new DateOnly(2024, 3, 1),
                            PermitType = "Environmental",
                            ProjectId = 2,
                            Status = "Pending"
                        },
                        new
                        {
                            PermitId = 3,
                            LastUpdatedDate = new DateOnly(2024, 2, 1),
                            PermitReceivedDate = new DateOnly(2024, 1, 30),
                            PermitSubmitDate = new DateOnly(2024, 1, 15),
                            PermitType = "Electrical",
                            ProjectId = 3,
                            Status = "Approved"
                        });
                });

            modelBuilder.Entity("Solarness.Services.Database.Prediction", b =>
                {
                    b.Property<int>("PredictionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PredictionId"));

                    b.Property<double?>("Confidence")
                        .HasColumnType("float");

                    b.Property<DateOnly?>("PredictionDate")
                        .HasColumnType("date");

                    b.Property<string>("PredictionStatus")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("PredictionId")
                        .HasName("PK__Predicti__BAE4C1A05C2174BA");

                    b.HasIndex("ProjectId");

                    b.ToTable("Predictions");
                });

            modelBuilder.Entity("Solarness.Services.Database.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjectId"));

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal?>("ContractAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateOnly?>("EngineeringReceivedDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("EngineeringSubmitDate")
                        .HasColumnType("date");

                    b.Property<int?>("HomeownerId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Kw")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("KW");

                    b.Property<string>("PriorityLevel")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ProjectDescription")
                        .HasColumnType("text");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<DateOnly?>("SaleDate")
                        .HasColumnType("date");

                    b.Property<string>("Significance")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateOnly?>("SiteInspectionDate")
                        .HasColumnType("date");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("StreetAddress")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int");

                    b.Property<string>("Urgency")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ProjectId")
                        .HasName("PK__Projects__761ABEF0EB7D0886");

                    b.HasIndex("HomeownerId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            ProjectId = 1,
                            City = "Solar City",
                            ContractAmount = 25000.00m,
                            EngineeringReceivedDate = new DateOnly(2025, 3, 20),
                            EngineeringSubmitDate = new DateOnly(2025, 3, 15),
                            HomeownerId = 1,
                            Kw = 15.5m,
                            PriorityLevel = "High",
                            ProjectDescription = "This project involves the installation of a solar panel system for a residential home located in the city center.",
                            ProjectName = "Solar Panel Installation for Residential Home",
                            SaleDate = new DateOnly(2025, 2, 5),
                            Significance = "High",
                            SiteInspectionDate = new DateOnly(2025, 3, 10),
                            StatusId = 1,
                            StreetAddress = "123 Solar St.",
                            TeamId = 1,
                            Urgency = "Medium",
                            UserId = 1
                        },
                        new
                        {
                            ProjectId = 2,
                            City = "Solar City",
                            ContractAmount = 500000.00m,
                            EngineeringReceivedDate = new DateOnly(2025, 4, 12),
                            EngineeringSubmitDate = new DateOnly(2025, 4, 10),
                            HomeownerId = 2,
                            Kw = 100.0m,
                            PriorityLevel = "Medium",
                            ProjectDescription = "A commercial solar panel installation for a local office building.",
                            ProjectName = "Commercial Solar Panel Project",
                            SaleDate = new DateOnly(2025, 3, 1),
                            Significance = "Medium",
                            SiteInspectionDate = new DateOnly(2025, 4, 5),
                            StatusId = 2,
                            StreetAddress = "456 Green Ave.",
                            TeamId = 2,
                            Urgency = "Low",
                            UserId = 2
                        },
                        new
                        {
                            ProjectId = 3,
                            City = "Solar City",
                            ContractAmount = 25000.00m,
                            EngineeringReceivedDate = new DateOnly(2025, 3, 20),
                            EngineeringSubmitDate = new DateOnly(2025, 3, 15),
                            HomeownerId = 3,
                            Kw = 15.5m,
                            PriorityLevel = "High",
                            ProjectDescription = "This project involves the installation of a solar panel system for a residential home located in the city center.",
                            ProjectName = "Solar Panel Installation for Company",
                            SaleDate = new DateOnly(2025, 2, 5),
                            Significance = "High",
                            SiteInspectionDate = new DateOnly(2025, 3, 10),
                            StatusId = 1,
                            StreetAddress = "123 Solar St.",
                            TeamId = 1,
                            Urgency = "Medium",
                            UserId = 1
                        },
                        new
                        {
                            ProjectId = 4,
                            City = "Solar City",
                            ContractAmount = 25000.00m,
                            EngineeringReceivedDate = new DateOnly(2025, 3, 20),
                            EngineeringSubmitDate = new DateOnly(2025, 3, 15),
                            HomeownerId = 4,
                            Kw = 15.5m,
                            PriorityLevel = "High",
                            ProjectDescription = "This project involves the installation of a solar panel system for a residential home located in the city center.",
                            ProjectName = "Solar Panel and system Installation ",
                            SaleDate = new DateOnly(2025, 2, 5),
                            Significance = "High",
                            SiteInspectionDate = new DateOnly(2025, 3, 10),
                            StatusId = 1,
                            StreetAddress = "123 Solar St.",
                            TeamId = 1,
                            Urgency = "Medium",
                            UserId = 1
                        },
                        new
                        {
                            ProjectId = 5,
                            City = "Solar City",
                            ContractAmount = 800000.00m,
                            EngineeringReceivedDate = new DateOnly(2025, 5, 18),
                            EngineeringSubmitDate = new DateOnly(2025, 5, 15),
                            HomeownerId = 5,
                            Kw = 200.0m,
                            PriorityLevel = "Very High",
                            ProjectDescription = "Installation of a large-scale rooftop solar system for a shopping mall.",
                            ProjectName = "Rooftop Solar for Shopping Mall",
                            SaleDate = new DateOnly(2025, 4, 1),
                            Significance = "Very High",
                            SiteInspectionDate = new DateOnly(2025, 5, 10),
                            StatusId = 3,
                            StreetAddress = "789 Mall Rd.",
                            TeamId = 3,
                            Urgency = "High",
                            UserId = 3
                        },
                        new
                        {
                            ProjectId = 6,
                            City = "Green Valley",
                            ContractAmount = 1500000.00m,
                            EngineeringReceivedDate = new DateOnly(2025, 6, 10),
                            EngineeringSubmitDate = new DateOnly(2025, 6, 5),
                            HomeownerId = 6,
                            Kw = 500.0m,
                            PriorityLevel = "High",
                            ProjectDescription = "A solar farm project to provide renewable energy for a large agricultural facility.",
                            ProjectName = "Solar Farm for Agricultural Use",
                            SaleDate = new DateOnly(2025, 5, 1),
                            Significance = "High",
                            SiteInspectionDate = new DateOnly(2025, 6, 1),
                            StatusId = 4,
                            StreetAddress = "567 Farm Ln.",
                            TeamId = 4,
                            Urgency = "Medium",
                            UserId = 4
                        },
                        new
                        {
                            ProjectId = 7,
                            City = "Lakewood",
                            ContractAmount = 20000.00m,
                            EngineeringReceivedDate = new DateOnly(2025, 7, 8),
                            EngineeringSubmitDate = new DateOnly(2025, 7, 5),
                            HomeownerId = 7,
                            Kw = 10.0m,
                            PriorityLevel = "Medium",
                            ProjectDescription = "Installation of a completely off-grid solar system for a remote cabin.",
                            ProjectName = "Off-Grid Solar Installation for Cabin",
                            SaleDate = new DateOnly(2025, 6, 10),
                            Significance = "Medium",
                            SiteInspectionDate = new DateOnly(2025, 7, 1),
                            StatusId = 2,
                            StreetAddress = "910 Mountain Pass",
                            TeamId = 5,
                            Urgency = "High",
                            UserId = 5
                        },
                        new
                        {
                            ProjectId = 8,
                            City = "Solar City",
                            ContractAmount = 1200000.00m,
                            EngineeringReceivedDate = new DateOnly(2025, 8, 25),
                            EngineeringSubmitDate = new DateOnly(2025, 8, 20),
                            HomeownerId = 8,
                            Kw = 300.0m,
                            PriorityLevel = "Very High",
                            ProjectDescription = "Installation of a solar-powered backup system for a major city hospital.",
                            ProjectName = "Solar Backup System for Hospital",
                            SaleDate = new DateOnly(2025, 7, 10),
                            Significance = "Very High",
                            SiteInspectionDate = new DateOnly(2025, 8, 15),
                            StatusId = 5,
                            StreetAddress = "300 Health St.",
                            TeamId = 6,
                            Urgency = "Very High",
                            UserId = 6
                        },
                        new
                        {
                            ProjectId = 9,
                            City = "Solar City",
                            ContractAmount = 30000.00m,
                            EngineeringReceivedDate = new DateOnly(2025, 9, 12),
                            EngineeringSubmitDate = new DateOnly(2025, 9, 10),
                            HomeownerId = 9,
                            Kw = 20.0m,
                            PriorityLevel = "Medium",
                            ProjectDescription = "Installation of a solar panel system with battery storage for a suburban home.",
                            ProjectName = "Residential Solar with Battery Storage",
                            SaleDate = new DateOnly(2025, 8, 1),
                            Significance = "Medium",
                            SiteInspectionDate = new DateOnly(2025, 9, 5),
                            StatusId = 1,
                            StreetAddress = "222 Suburb Ln.",
                            TeamId = 1,
                            Urgency = "Medium",
                            UserId = 7
                        },
                        new
                        {
                            ProjectId = 10,
                            City = "Green Town",
                            ContractAmount = 200000.00m,
                            EngineeringReceivedDate = new DateOnly(2025, 10, 18),
                            EngineeringSubmitDate = new DateOnly(2025, 10, 15),
                            HomeownerId = 10,
                            Kw = 50.0m,
                            PriorityLevel = "Medium",
                            ProjectDescription = "A solar canopy providing renewable energy for a local public park.",
                            ProjectName = "Solar Canopy for Public Park",
                            SaleDate = new DateOnly(2025, 9, 1),
                            Significance = "High",
                            SiteInspectionDate = new DateOnly(2025, 10, 10),
                            StatusId = 3,
                            StreetAddress = "100 Park Blvd.",
                            TeamId = 2,
                            Urgency = "Low",
                            UserId = 8
                        },
                        new
                        {
                            ProjectId = 11,
                            City = "Industrial City",
                            ContractAmount = 1600000.00m,
                            EngineeringReceivedDate = new DateOnly(2025, 11, 12),
                            EngineeringSubmitDate = new DateOnly(2025, 11, 10),
                            HomeownerId = 11,
                            Kw = 400.0m,
                            PriorityLevel = "High",
                            ProjectDescription = "Adding solar panels to an existing factory to reduce energy costs.",
                            ProjectName = "Solar Retrofit for Factory",
                            SaleDate = new DateOnly(2025, 10, 1),
                            Significance = "Very High",
                            SiteInspectionDate = new DateOnly(2025, 11, 5),
                            StatusId = 4,
                            StreetAddress = "888 Industrial Ave.",
                            TeamId = 4,
                            Urgency = "Medium",
                            UserId = 9
                        },
                        new
                        {
                            ProjectId = 12,
                            City = "Solar City",
                            ContractAmount = 300000.00m,
                            EngineeringReceivedDate = new DateOnly(2025, 12, 10),
                            EngineeringSubmitDate = new DateOnly(2025, 12, 5),
                            HomeownerId = 12,
                            Kw = 80.0m,
                            PriorityLevel = "High",
                            ProjectDescription = "Installation of solar-powered streetlights across the city.",
                            ProjectName = "Solar Streetlight Installation",
                            SaleDate = new DateOnly(2025, 11, 1),
                            Significance = "Medium",
                            SiteInspectionDate = new DateOnly(2025, 12, 1),
                            StatusId = 2,
                            StreetAddress = "Various Locations",
                            TeamId = 3,
                            Urgency = "High",
                            UserId = 10
                        });
                });

            modelBuilder.Entity("Solarness.Services.Database.ProjectPhase", b =>
                {
                    b.Property<int>("PhaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PhaseId"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("PhaseName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("PhaseId")
                        .HasName("PK__ProjectP__5BA26D62F4DD17A6");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectPhases");

                    b.HasData(
                        new
                        {
                            PhaseId = 1,
                            Description = "Initial phase for project feasibility and design",
                            EndDate = new DateOnly(2024, 2, 28),
                            PhaseName = "Planning",
                            ProjectId = 1,
                            StartDate = new DateOnly(2024, 2, 1),
                            Status = "Completed"
                        },
                        new
                        {
                            PhaseId = 2,
                            Description = "Regulatory approvals and paperwork processing",
                            EndDate = new DateOnly(2024, 3, 20),
                            PhaseName = "Permitting",
                            ProjectId = 1,
                            StartDate = new DateOnly(2024, 3, 1),
                            Status = "In Progress"
                        },
                        new
                        {
                            PhaseId = 3,
                            Description = "Solar panels and system installation on-site",
                            EndDate = new DateOnly(2024, 4, 10),
                            PhaseName = "Installation",
                            ProjectId = 1,
                            StartDate = new DateOnly(2024, 3, 22),
                            Status = "Not Started"
                        });
                });

            modelBuilder.Entity("Solarness.Services.Database.ProjectStage", b =>
                {
                    b.Property<int>("StageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StageId"));

                    b.Property<int?>("DaysInStage")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("StageEndDate")
                        .HasColumnType("date");

                    b.Property<string>("StageGroup")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("StageName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateOnly?>("StageStartDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("StageUpdatedDate")
                        .HasColumnType("date");

                    b.HasKey("StageId")
                        .HasName("PK__ProjectS__03EB7AD812943F9E");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectStages");

                    b.HasData(
                        new
                        {
                            StageId = 1,
                            DaysInStage = 5,
                            ProjectId = 1,
                            StageEndDate = new DateOnly(2024, 3, 5),
                            StageGroup = "Planning",
                            StageName = "Initial Site Survey",
                            StageStartDate = new DateOnly(2024, 3, 1),
                            StageUpdatedDate = new DateOnly(2024, 3, 6)
                        },
                        new
                        {
                            StageId = 2,
                            DaysInStage = 15,
                            ProjectId = 1,
                            StageEndDate = new DateOnly(2024, 3, 20),
                            StageGroup = "Regulatory",
                            StageName = "Permit Approval",
                            StageStartDate = new DateOnly(2024, 3, 6),
                            StageUpdatedDate = new DateOnly(2024, 3, 21)
                        },
                        new
                        {
                            StageId = 3,
                            DaysInStage = 10,
                            ProjectId = 1,
                            StageEndDate = new DateOnly(2024, 4, 1),
                            StageGroup = "Construction",
                            StageName = "Panel Installation",
                            StageStartDate = new DateOnly(2024, 3, 22),
                            StageUpdatedDate = new DateOnly(2024, 4, 2)
                        });
                });

            modelBuilder.Entity("Solarness.Services.Database.ProjectStatus", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusId"));

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("StatusId")
                        .HasName("PK__ProjectS__C8EE2063A9D2C0C0");

                    b.HasIndex(new[] { "StatusName" }, "UQ__ProjectS__05E7698A0993BC6E")
                        .IsUnique();

                    b.ToTable("ProjectStatus", (string)null);

                    b.HasData(
                        new
                        {
                            StatusId = 1,
                            StatusName = "Planning"
                        },
                        new
                        {
                            StatusId = 2,
                            StatusName = "In Progress"
                        },
                        new
                        {
                            StatusId = 3,
                            StatusName = "Completed"
                        },
                        new
                        {
                            StatusId = 4,
                            StatusName = "On Hold"
                        },
                        new
                        {
                            StatusId = 5,
                            StatusName = "Cancelled"
                        });
                });

            modelBuilder.Entity("Solarness.Services.Database.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("RoleId")
                        .HasName("PK__Roles__8AFACE1AF69E740C");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            Description = "Administrator with full access to all system functionalities.",
                            Name = "Admin"
                        },
                        new
                        {
                            RoleId = 2,
                            Description = "Responsible for managing projects and overseeing team members.",
                            Name = "Manager"
                        },
                        new
                        {
                            RoleId = 3,
                            Description = "Regular user with access to view and interact with projects.",
                            Name = "Panel installer"
                        },
                        new
                        {
                            RoleId = 4,
                            Description = "Responsible for the installation and maintenance of solar panels.",
                            Name = "Technician"
                        });
                });

            modelBuilder.Entity("Solarness.Services.Database.SolarPanel", b =>
                {
                    b.Property<int>("PanelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PanelId"));

                    b.Property<double?>("Efficiency")
                        .HasColumnType("float");

                    b.Property<double?>("EnergyProduced")
                        .HasColumnType("float");

                    b.Property<DateOnly?>("InstallationDate")
                        .HasColumnType("date");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("PanelId")
                        .HasName("PK__SolarPan__49CA680639FACEF4");

                    b.HasIndex("ProjectId");

                    b.HasIndex(new[] { "SerialNumber" }, "UQ__SolarPan__048A0008DE638656")
                        .IsUnique();

                    b.ToTable("SolarPanels");

                    b.HasData(
                        new
                        {
                            PanelId = 1,
                            Efficiency = 22.699999999999999,
                            EnergyProduced = 5000.0,
                            InstallationDate = new DateOnly(2024, 5, 15),
                            ModelName = "SunPower X22-370",
                            ProjectId = 1,
                            SerialNumber = "SPX22-370-12345"
                        },
                        new
                        {
                            PanelId = 2,
                            Efficiency = 21.399999999999999,
                            EnergyProduced = 4000.0,
                            InstallationDate = new DateOnly(2024, 6, 5),
                            ModelName = "LG NeON R 370W",
                            ProjectId = 4,
                            SerialNumber = "LGNR-370-67890"
                        },
                        new
                        {
                            PanelId = 3,
                            Efficiency = 20.5,
                            EnergyProduced = 4500.0,
                            InstallationDate = new DateOnly(2024, 7, 8),
                            ModelName = "Canadian Solar HiKu 395W",
                            ProjectId = 3,
                            SerialNumber = "CSH395-11223"
                        },
                        new
                        {
                            PanelId = 4,
                            Efficiency = 19.899999999999999,
                            EnergyProduced = 4700.0,
                            InstallationDate = new DateOnly(2024, 8, 10),
                            ModelName = "Trina Solar Vertex 400W",
                            ProjectId = 1,
                            SerialNumber = "TSV400-33445"
                        });
                });

            modelBuilder.Entity("Solarness.Services.Database.Task", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TaskId"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<int?>("MemberId")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TaskName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("TaskId")
                        .HasName("PK__Tasks__7C6949B19478DBB1");

                    b.HasIndex("MemberId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Tasks");

                    b.HasData(
                        new
                        {
                            TaskId = 1,
                            Description = "Conduct initial site assessment for solar panel installation.",
                            EndDate = new DateOnly(2024, 1, 15),
                            MemberId = 1,
                            ProjectId = 1,
                            StartDate = new DateOnly(2024, 1, 10),
                            Status = "Completed",
                            TaskName = "Site Assessment"
                        },
                        new
                        {
                            TaskId = 2,
                            Description = "Submit necessary permits for approval.",
                            EndDate = new DateOnly(2024, 2, 10),
                            MemberId = 2,
                            ProjectId = 2,
                            StartDate = new DateOnly(2024, 2, 1),
                            Status = "In Progress",
                            TaskName = "Permit Submission"
                        },
                        new
                        {
                            TaskId = 3,
                            Description = "Order and receive necessary materials for installation.",
                            EndDate = new DateOnly(2024, 3, 20),
                            MemberId = 3,
                            ProjectId = 3,
                            StartDate = new DateOnly(2024, 3, 5),
                            Status = "Pending",
                            TaskName = "Material Procurement"
                        },
                        new
                        {
                            TaskId = 4,
                            Description = "Complete solar panel installation on-site.",
                            EndDate = new DateOnly(2024, 4, 25),
                            MemberId = 2,
                            ProjectId = 4,
                            StartDate = new DateOnly(2024, 4, 10),
                            Status = "Scheduled",
                            TaskName = "Installation"
                        },
                        new
                        {
                            TaskId = 5,
                            Description = "Conduct system tests to ensure proper functionality.",
                            EndDate = new DateOnly(2024, 5, 5),
                            MemberId = 4,
                            ProjectId = 1,
                            StartDate = new DateOnly(2024, 5, 1),
                            Status = "Scheduled",
                            TaskName = "System Testing"
                        },
                        new
                        {
                            TaskId = 6,
                            Description = "Perform final inspection before project completion.",
                            EndDate = new DateOnly(2024, 5, 15),
                            MemberId = 5,
                            ProjectId = 2,
                            StartDate = new DateOnly(2024, 5, 10),
                            Status = "Pending",
                            TaskName = "Final Inspection"
                        },
                        new
                        {
                            TaskId = 7,
                            Description = "Train the client on solar panel maintenance and usage.",
                            EndDate = new DateOnly(2024, 6, 2),
                            MemberId = 6,
                            ProjectId = 3,
                            StartDate = new DateOnly(2024, 6, 1),
                            Status = "Pending",
                            TaskName = "Client Training"
                        },
                        new
                        {
                            TaskId = 8,
                            Description = "Complete necessary electrical work for installation.",
                            EndDate = new DateOnly(2024, 6, 10),
                            MemberId = 7,
                            ProjectId = 4,
                            StartDate = new DateOnly(2024, 6, 5),
                            Status = "Scheduled",
                            TaskName = "Electrical Work"
                        },
                        new
                        {
                            TaskId = 9,
                            Description = "Prepare the roof for solar panel installation.",
                            EndDate = new DateOnly(2024, 7, 3),
                            MemberId = 8,
                            ProjectId = 5,
                            StartDate = new DateOnly(2024, 7, 1),
                            Status = "Completed",
                            TaskName = "Roof Preparation"
                        },
                        new
                        {
                            TaskId = 10,
                            Description = "Ensure the structure can support solar panels.",
                            EndDate = new DateOnly(2024, 7, 8),
                            MemberId = 9,
                            ProjectId = 6,
                            StartDate = new DateOnly(2024, 7, 5),
                            Status = "In Progress",
                            TaskName = "Structural Reinforcement"
                        },
                        new
                        {
                            TaskId = 11,
                            Description = "Organize and secure all necessary cabling.",
                            EndDate = new DateOnly(2024, 8, 3),
                            MemberId = 10,
                            ProjectId = 7,
                            StartDate = new DateOnly(2024, 8, 1),
                            Status = "Pending",
                            TaskName = "Cable Management"
                        },
                        new
                        {
                            TaskId = 12,
                            Description = "Secure solar panels onto the mounting structure.",
                            EndDate = new DateOnly(2024, 8, 10),
                            MemberId = 1,
                            ProjectId = 8,
                            StartDate = new DateOnly(2024, 8, 5),
                            Status = "Scheduled",
                            TaskName = "Solar Panel Mounting"
                        },
                        new
                        {
                            TaskId = 13,
                            Description = "Integrate solar system with the existing power grid.",
                            EndDate = new DateOnly(2024, 9, 5),
                            MemberId = 2,
                            ProjectId = 9,
                            StartDate = new DateOnly(2024, 9, 1),
                            Status = "Pending",
                            TaskName = "System Integration"
                        },
                        new
                        {
                            TaskId = 14,
                            Description = "Provide warranty details and project documentation to the client.",
                            EndDate = new DateOnly(2024, 9, 15),
                            MemberId = 3,
                            ProjectId = 10,
                            StartDate = new DateOnly(2024, 9, 10),
                            Status = "Scheduled",
                            TaskName = "Warranty and Documentation"
                        });
                });

            modelBuilder.Entity("Solarness.Services.Database.Team", b =>
                {
                    b.Property<int>("TeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeamId"));

                    b.Property<DateTime?>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("TeamId")
                        .HasName("PK__Teams__123AE7990851A463");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "TeamName" }, "UQ__Teams__4E21CAACA71E3691")
                        .IsUnique();

                    b.ToTable("Teams");

                    b.HasData(
                        new
                        {
                            TeamId = 1,
                            CreationDate = new DateTime(2024, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Team responsible for installing solar panels.",
                            TeamName = "Solar Installers",
                            UserId = 1
                        },
                        new
                        {
                            TeamId = 2,
                            CreationDate = new DateTime(2024, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Engineers overseeing solar panel projects.",
                            TeamName = "Project Engineers",
                            UserId = 2
                        },
                        new
                        {
                            TeamId = 3,
                            CreationDate = new DateTime(2024, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Team responsible for handling electrical components of solar projects.",
                            TeamName = "Electrical Technicians",
                            UserId = 3
                        },
                        new
                        {
                            TeamId = 4,
                            CreationDate = new DateTime(2024, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Team ensuring project sites meet installation requirements.",
                            TeamName = "Site Inspectors",
                            UserId = 4
                        },
                        new
                        {
                            TeamId = 5,
                            CreationDate = new DateTime(2024, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Team handling sales and customer relationships.",
                            TeamName = "Sales & Client Relations",
                            UserId = 5
                        },
                        new
                        {
                            TeamId = 6,
                            CreationDate = new DateTime(2024, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Team responsible for securing necessary permits.",
                            TeamName = "Permitting Specialists",
                            UserId = 6
                        },
                        new
                        {
                            TeamId = 7,
                            CreationDate = new DateTime(2024, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Team handling orders and materials for projects.",
                            TeamName = "Material Procurement",
                            UserId = 7
                        },
                        new
                        {
                            TeamId = 8,
                            CreationDate = new DateTime(2024, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Team responsible for checking installation quality.",
                            TeamName = "Quality Assurance",
                            UserId = 8
                        },
                        new
                        {
                            TeamId = 9,
                            CreationDate = new DateTime(2024, 6, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Team providing maintenance and troubleshooting support.",
                            TeamName = "Maintenance & Support",
                            UserId = 9
                        },
                        new
                        {
                            TeamId = 10,
                            CreationDate = new DateTime(2024, 7, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Team advising on energy efficiency and renewable solutions.",
                            TeamName = "Renewable Energy Consultants",
                            UserId = 10
                        },
                        new
                        {
                            TeamId = 11,
                            CreationDate = new DateTime(2024, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Team specializing in battery storage solutions for solar projects.",
                            TeamName = "Battery Storage Experts",
                            UserId = 11
                        },
                        new
                        {
                            TeamId = 12,
                            CreationDate = new DateTime(2024, 8, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Team handling integration of solar systems with the power grid.",
                            TeamName = "Grid Integration Specialists",
                            UserId = 12
                        });
                });

            modelBuilder.Entity("Solarness.Services.Database.TeamMember", b =>
                {
                    b.Property<int>("MemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MemberId"));

                    b.Property<int?>("TeamId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("MemberId")
                        .HasName("PK__TeamMemb__0CF04B1815329411");

                    b.HasIndex("TeamId");

                    b.HasIndex(new[] { "UserId", "TeamId" }, "UQ__TeamMemb__96AB623464259E49")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL AND [TeamId] IS NOT NULL");

                    b.ToTable("TeamMembers");

                    b.HasData(
                        new
                        {
                            MemberId = 1,
                            TeamId = 1,
                            UserId = 1
                        },
                        new
                        {
                            MemberId = 2,
                            TeamId = 1,
                            UserId = 2
                        },
                        new
                        {
                            MemberId = 3,
                            TeamId = 2,
                            UserId = 3
                        },
                        new
                        {
                            MemberId = 4,
                            TeamId = 1,
                            UserId = 12
                        },
                        new
                        {
                            MemberId = 5,
                            TeamId = 3,
                            UserId = 11
                        },
                        new
                        {
                            MemberId = 6,
                            TeamId = 2,
                            UserId = 10
                        },
                        new
                        {
                            MemberId = 7,
                            TeamId = 1,
                            UserId = 9
                        },
                        new
                        {
                            MemberId = 8,
                            TeamId = 5,
                            UserId = 8
                        },
                        new
                        {
                            MemberId = 9,
                            TeamId = 5,
                            UserId = 7
                        },
                        new
                        {
                            MemberId = 10,
                            TeamId = 5,
                            UserId = 6
                        },
                        new
                        {
                            MemberId = 11,
                            TeamId = 4,
                            UserId = 5
                        },
                        new
                        {
                            MemberId = 12,
                            TeamId = 1,
                            UserId = 4
                        });
                });

            modelBuilder.Entity("Solarness.Services.Database.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Picture")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("UserId")
                        .HasName("PK__Users__1788CC4C477F1C10");

                    b.HasIndex("RoleId");

                    b.HasIndex(new[] { "Username" }, "UQ__Users__536C85E4E01254C0")
                        .IsUnique();

                    b.HasIndex(new[] { "Email" }, "UQ__Users__A9D10534859D3D96")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Email = "johndoe@email.com",
                            FirstName = "John",
                            LastName = "Doe",
                            PasswordHash = "JfJzsL3ngGWki+Dn67C+8WLy73I=",
                            PasswordSalt = "7TUJfmgkkDvcY3PB/M4fhg==",
                            PhoneNumber = "123-456-7890",
                            Picture = "path/to/picture.jpg",
                            RoleId = 1,
                            Username = "johny"
                        },
                        new
                        {
                            UserId = 2,
                            Email = "janesmith@email.com",
                            FirstName = "Jane",
                            LastName = "Smith",
                            PasswordHash = "ug0GgEnT5hKaHsfTn1l1kiGvZAg=",
                            PasswordSalt = "qh31pfpS2ox1h96QPhmR/Q==",
                            PhoneNumber = "098-765-4321",
                            Picture = "path/to/picture2.jpg",
                            RoleId = 3,
                            Username = "janes"
                        },
                        new
                        {
                            UserId = 3,
                            Email = "alices@email.com",
                            FirstName = "Alice",
                            LastName = "Snow",
                            PasswordHash = "JfJzsL3ngGWki+Dn67C+8WLy73I=",
                            PasswordSalt = "7TUJfmgkkDvcY3PB/M4fhg==",
                            PhoneNumber = "123-456-7890",
                            Picture = "path/to/picture.jpg",
                            RoleId = 2,
                            Username = "alice"
                        },
                        new
                        {
                            UserId = 4,
                            Email = "robertj@email.com",
                            FirstName = "Robert",
                            LastName = "Johnson",
                            PasswordHash = "hJfJzsL3ngGWki+Dn67C+8WLy73I=",
                            PasswordSalt = "9TUJfmgkkDvcY3PB/M4fhg==",
                            PhoneNumber = "321-654-0987",
                            Picture = "path/to/picture4.jpg",
                            RoleId = 2,
                            Username = "robertj"
                        },
                        new
                        {
                            UserId = 5,
                            Email = "emilyc@email.com",
                            FirstName = "Emily",
                            LastName = "Clark",
                            PasswordHash = "oJfJzsL3ngGWki+Dn67C+8WLy73I=",
                            PasswordSalt = "8TUJfmgkkDvcY3PB/M4fhg==",
                            PhoneNumber = "456-123-7890",
                            Picture = "path/to/picture5.jpg",
                            RoleId = 3,
                            Username = "emilyc"
                        },
                        new
                        {
                            UserId = 6,
                            Email = "danbrown@email.com",
                            FirstName = "Daniel",
                            LastName = "Brown",
                            PasswordHash = "pJfJzsL3ngGWki+Dn67C+8WLy73I=",
                            PasswordSalt = "6TUJfmgkkDvcY3PB/M4fhg==",
                            PhoneNumber = "987-654-3210",
                            Picture = "path/to/picture6.jpg",
                            RoleId = 1,
                            Username = "danbrown"
                        },
                        new
                        {
                            UserId = 7,
                            Email = "sophiam@email.com",
                            FirstName = "Sophia",
                            LastName = "Miller",
                            PasswordHash = "qJfJzsL3ngGWki+Dn67C+8WLy73I=",
                            PasswordSalt = "5TUJfmgkkDvcY3PB/M4fhg==",
                            PhoneNumber = "789-012-3456",
                            Picture = "path/to/picture7.jpg",
                            RoleId = 4,
                            Username = "sophiam"
                        },
                        new
                        {
                            UserId = 8,
                            Email = "michaeld@email.com",
                            FirstName = "Michael",
                            LastName = "Davis",
                            PasswordHash = "rJfJzsL3ngGWki+Dn67C+8WLy73I=",
                            PasswordSalt = "4TUJfmgkkDvcY3PB/M4fhg==",
                            PhoneNumber = "345-678-9012",
                            Picture = "path/to/picture8.jpg",
                            RoleId = 3,
                            Username = "michaeld"
                        },
                        new
                        {
                            UserId = 9,
                            Email = "oliviaw@email.com",
                            FirstName = "Olivia",
                            LastName = "Wilson",
                            PasswordHash = "sJfJzsL3ngGWki+Dn67C+8WLy73I=",
                            PasswordSalt = "3TUJfmgkkDvcY3PB/M4fhg==",
                            PhoneNumber = "654-321-0987",
                            Picture = "path/to/picture9.jpg",
                            RoleId = 4,
                            Username = "oliviaw"
                        },
                        new
                        {
                            UserId = 10,
                            Email = "williamand@email.com",
                            FirstName = "William",
                            LastName = "Anderson",
                            PasswordHash = "tJfJzsL3ngGWki+Dn67C+8WLy73I=",
                            PasswordSalt = "2TUJfmgkkDvcY3PB/M4fhg==",
                            PhoneNumber = "231-546-7890",
                            Picture = "path/to/picture10.jpg",
                            RoleId = 3,
                            Username = "williamand"
                        },
                        new
                        {
                            UserId = 11,
                            Email = "jamesm@email.com",
                            FirstName = "James",
                            LastName = "Martinez",
                            PasswordHash = "uJfJzsL3ngGWki+Dn67C+8WLy73I=",
                            PasswordSalt = "1TUJfmgkkDvcY3PB/M4fhg==",
                            PhoneNumber = "123-789-4560",
                            Picture = "path/to/picture11.jpg",
                            RoleId = 2,
                            Username = "jamesm"
                        },
                        new
                        {
                            UserId = 12,
                            Email = "isabellag@email.com",
                            FirstName = "Isabella",
                            LastName = "Garcia",
                            PasswordHash = "vJfJzsL3ngGWki+Dn67C+8WLy73I=",
                            PasswordSalt = "0TUJfmgkkDvcY3PB/M4fhg==",
                            PhoneNumber = "789-456-1230",
                            Picture = "path/to/picture12.jpg",
                            RoleId = 3,
                            Username = "isabellag"
                        },
                        new
                        {
                            UserId = 13,
                            Email = "davidt@email.com",
                            FirstName = "David",
                            LastName = "Taylor",
                            PasswordHash = "wJfJzsL3ngGWki+Dn67C+8WLy73I=",
                            PasswordSalt = "zTUJfmgkkDvcY3PB/M4fhg==",
                            PhoneNumber = "567-890-1234",
                            Picture = "path/to/picture13.jpg",
                            RoleId = 4,
                            Username = "davidt"
                        });
                });

            modelBuilder.Entity("Solarness.Services.Database.Documentation", b =>
                {
                    b.HasOne("Solarness.Services.Database.Project", "Project")
                        .WithMany("Documentations")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK__Documenta__Proje__7F2BE32F");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Solarness.Services.Database.Financing", b =>
                {
                    b.HasOne("Solarness.Services.Database.Project", "Project")
                        .WithMany("Financings")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK__Financing__Proje__44FF419A");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Solarness.Services.Database.InstallationDetail", b =>
                {
                    b.HasOne("Solarness.Services.Database.InstallationLocation", "Location")
                        .WithMany("InstallationDetails")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("FK__Installat__Locat__797309D9");

                    b.HasOne("Solarness.Services.Database.Project", "Project")
                        .WithMany("InstallationDetails")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK__Installat__Proje__7B5B524B");

                    b.HasOne("Solarness.Services.Database.User", "User")
                        .WithMany("InstallationDetails")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK__Installat__UserI__7A672E12");

                    b.Navigation("Location");

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Solarness.Services.Database.InstallationLocation", b =>
                {
                    b.HasOne("Solarness.Services.Database.Project", "Project")
                        .WithMany("InstallationLocations")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK__Installat__Proje__628FA481");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Solarness.Services.Database.Milestone", b =>
                {
                    b.HasOne("Solarness.Services.Database.Project", "Project")
                        .WithMany("Milestones")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK__Milestone__Proje__3C69FB99");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Solarness.Services.Database.Notification", b =>
                {
                    b.HasOne("Solarness.Services.Database.Project", "Project")
                        .WithMany("Notifications")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK__Notificat__Proje__5EBF139D");

                    b.HasOne("Solarness.Services.Database.User", null)
                        .WithMany("Notifications")
                        .HasForeignKey("UserId");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Solarness.Services.Database.PerformanceHistory", b =>
                {
                    b.HasOne("Solarness.Services.Database.SolarPanel", "Panel")
                        .WithMany("PerformanceHistories")
                        .HasForeignKey("PanelId")
                        .HasConstraintName("FK__Performan__Panel__5535A963");

                    b.Navigation("Panel");
                });

            modelBuilder.Entity("Solarness.Services.Database.Permit", b =>
                {
                    b.HasOne("Solarness.Services.Database.Project", "Project")
                        .WithMany("Permits")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK__Permits__Project__3F466844");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Solarness.Services.Database.Prediction", b =>
                {
                    b.HasOne("Solarness.Services.Database.Project", "Project")
                        .WithMany("Predictions")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK__Predictio__Proje__59063A47");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Solarness.Services.Database.Project", b =>
                {
                    b.HasOne("Solarness.Services.Database.Homeowner", "Homeowner")
                        .WithMany("Projects")
                        .HasForeignKey("HomeownerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK__Projects__Homeow__02FC7413");

                    b.HasOne("Solarness.Services.Database.ProjectStatus", "Status")
                        .WithMany("Projects")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK__Projects__Status__37A5467C");

                    b.HasOne("Solarness.Services.Database.Team", "Team")
                        .WithMany("Projects")
                        .HasForeignKey("TeamId")
                        .HasConstraintName("FK__Projects__TeamId__38996AB5");

                    b.HasOne("Solarness.Services.Database.User", "User")
                        .WithMany("Projects")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK__Projects__UserId__398D8EEE");

                    b.Navigation("Homeowner");

                    b.Navigation("Status");

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Solarness.Services.Database.ProjectPhase", b =>
                {
                    b.HasOne("Solarness.Services.Database.Project", "Project")
                        .WithMany("ProjectPhases")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK__ProjectPh__Proje__4CA06362");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Solarness.Services.Database.ProjectStage", b =>
                {
                    b.HasOne("Solarness.Services.Database.Project", "Project")
                        .WithMany("ProjectStages")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK__ProjectSt__Proje__4222D4EF");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Solarness.Services.Database.SolarPanel", b =>
                {
                    b.HasOne("Solarness.Services.Database.Project", "Project")
                        .WithMany("SolarPanels")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK__SolarPane__Proje__5165187F");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Solarness.Services.Database.Task", b =>
                {
                    b.HasOne("Solarness.Services.Database.TeamMember", "Member")
                        .WithMany("Tasks")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK__Tasks__MemberId__49C3F6B7");

                    b.HasOne("Solarness.Services.Database.Project", "Project")
                        .WithMany("Tasks")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK__Tasks__ProjectId__48CFD27E");

                    b.Navigation("Member");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Solarness.Services.Database.Team", b =>
                {
                    b.HasOne("Solarness.Services.Database.User", "User")
                        .WithMany("Teams")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Teams__UserId__2D27B809");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Solarness.Services.Database.TeamMember", b =>
                {
                    b.HasOne("Solarness.Services.Database.Team", "Team")
                        .WithMany("TeamMembers")
                        .HasForeignKey("TeamId")
                        .HasConstraintName("FK__TeamMembe__TeamI__31EC6D26");

                    b.HasOne("Solarness.Services.Database.User", "User")
                        .WithMany("TeamMembers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__TeamMembe__UserI__30F848ED");

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Solarness.Services.Database.User", b =>
                {
                    b.HasOne("Solarness.Services.Database.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK__Users__RoleId__286302EC");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Solarness.Services.Database.Homeowner", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("Solarness.Services.Database.InstallationLocation", b =>
                {
                    b.Navigation("InstallationDetails");
                });

            modelBuilder.Entity("Solarness.Services.Database.Project", b =>
                {
                    b.Navigation("Documentations");

                    b.Navigation("Financings");

                    b.Navigation("InstallationDetails");

                    b.Navigation("InstallationLocations");

                    b.Navigation("Milestones");

                    b.Navigation("Notifications");

                    b.Navigation("Permits");

                    b.Navigation("Predictions");

                    b.Navigation("ProjectPhases");

                    b.Navigation("ProjectStages");

                    b.Navigation("SolarPanels");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("Solarness.Services.Database.ProjectStatus", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("Solarness.Services.Database.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Solarness.Services.Database.SolarPanel", b =>
                {
                    b.Navigation("PerformanceHistories");
                });

            modelBuilder.Entity("Solarness.Services.Database.Team", b =>
                {
                    b.Navigation("Projects");

                    b.Navigation("TeamMembers");
                });

            modelBuilder.Entity("Solarness.Services.Database.TeamMember", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("Solarness.Services.Database.User", b =>
                {
                    b.Navigation("InstallationDetails");

                    b.Navigation("Notifications");

                    b.Navigation("Projects");

                    b.Navigation("TeamMembers");

                    b.Navigation("Teams");
                });
#pragma warning restore 612, 618
        }
    }
}
